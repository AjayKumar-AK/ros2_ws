ajay@ajay-VMware-Virtual-Platform:~/ros2_ws$ ros2 topic echo /imu/data --once
header:
  stamp:
    sec: 1758259824
    nanosec: 795316787
  frame_id: imu_link
orientation:
  x: 0.0
  y: 0.0
  z: 0.0
  w: 1.0
orientation_covariance:
- -1.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
angular_velocity:
  x: 0.00017453292519943296
  y: -0.0
  z: -0.0
angular_velocity_covariance:
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
linear_acceleration:
  x: -0.36
  y: -0.64
  z: -9.82
linear_acceleration_covariance:
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
- 0.0
---
ajay@ajay-VMware-Virtual-Platform:~/ros2_ws$ ros2 echo wheel/odom --once
usage: ros2 [-h] [--use-python-default-buffering] Call `ros2 <command> -h` for more detailed usage. ...
ros2: error: argument Call `ros2 <command> -h` for more detailed usage.: invalid choice: 'echo' (choose from 'action', 'bag', 'component', 'daemon', 'doctor', 'extension_points', 'extensions', 'interface', 'launch', 'lifecycle', 'multicast', 'node', 'param', 'pkg', 'run', 'security', 'service', 'topic', 'wtf')
ajay@ajay-VMware-Virtual-Platform:~/ros2_ws$ ros2 topic echo wheel/odom --once
header:
  stamp:
    sec: 1758259846
    nanosec: 178790321
  frame_id: odom
child_frame_id: base_footprint
pose:
  pose:
    position:
      x: -12.70412629465703
      y: 22.304159725722094
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.9549802229104555
      w: -0.2966694690221707
  covariance:
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
twist:
  twist:
    linear:
      x: 0.08446150634727202
      y: 0.029966298054150384
      z: 0.0
    angular:
      x: 0.0
      y: 0.0
      z: 0.0067014681394848095
  covariance:
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
---
ajay@ajay-VMware-Virtual-Platform:~/ros2_ws$ ros2 topic echo /odometry/filtered --once
header:
  stamp:
    sec: 1758259854
    nanosec: 357610691
  frame_id: odom
child_frame_id: base_link
pose:
  pose:
    position:
      x: -12.852391409272562
      y: 1.777050407867985
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: -0.3756453513365877
      w: 0.9267634919542372
  covariance:
  - 9.99999967735138e-10
  - 1.3831319480579826e-16
  - 0.0
  - 0.0
  - 0.0
  - -4.603418242701941e-18
  - 1.383131948058006e-16
  - 9.999994032252935e-10
  - 0.0
  - 0.0
  - 0.0
  - 1.99542882404629e-17
  - 0.0
  - 0.0
  - 9.999999970108654e-07
  - 1.4895818515850244e-25
  - -5.156561974795379e-25
  - 0.0
  - 0.0
  - 0.0
  - 1.4895818515850244e-25
  - 9.999999970108654e-07
  - 2.5696806814276377e-35
  - 0.0
  - 0.0
  - 0.0
  - -5.156561974795378e-25
  - 2.569680681427637e-35
  - 9.999999970108654e-07
  - 0.0
  - -4.603418242702121e-18
  - 1.995428824046334e-17
  - 0.0
  - 0.0
  - 0.0
  - 9.999993013274421e-10
twist:
  twist:
    linear:
      x: 361.06110061746335
      y: 175.25827004469068
      z: 0.0
    angular:
      x: 0.0
      y: 0.0
      z: 2.4444170735594685e-10
  covariance:
  - 0.7250341388892686
  - -6.526860331616307e-05
  - 0.0
  - 0.0
  - 0.0
  - -7.517860537833551e-14
  - -6.526860339258972e-05
  - 13683.720261168046
  - 0.0
  - 0.0
  - 0.0
  - 2.6203895110920393e-12
  - 0.0
  - 0.0
  - 9.999999970108654e-07
  - 3.7239548034292237e-50
  - -1.2891405540948651e-49
  - 0.0
  - 0.0
  - 0.0
  - 3.723954803429226e-50
  - 9.999999970108654e-07
  - 6.424201644583281e-60
  - 0.0
  - 0.0
  - 0.0
  - -1.2891405540948655e-49
  - 6.42420164458328e-60
  - 9.999999970108654e-07
  - 0.0
  - -7.517860537833256e-14
  - 2.620389511092149e-12
  - 0.0
  - 0.0
  - 0.0
  - 3.345549999929748e-05
---
ajay@ajay-VMware-Virtual-Platform:~/ros2_ws$ 





-----------------------python bridge--------------------------------------------
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import TransformStamped
import tf_transformations
import tf2_ros
import serial
import math
import time

class SensorBridge(Node):
    def __init__(self,
                 port='/dev/ttyUSB0',
                 baud=115200,
                 ticks_per_rev=470.0,  # Corrected CPR
                 wheel_radius=0.047,
                 wheel_base=0.164,
                 track_width=0.22,
                 publish_rate_hz=50.0):
        super().__init__('sensor_bridge')
        self.imu_pub = self.create_publisher(Imu, 'imu/data', 10)
        self.odom_pub = self.create_publisher(Odometry, 'wheel/odom', 10)
        self.subscription = self.create_subscription(Twist, '/cmd_vel', self.listener_callback, 10)
        self.ser = serial.Serial(port, baud, timeout=1)
        self.get_logger().info(f"Opened serial {port} @ {baud}")
        self.ticks_per_rev = float(ticks_per_rev)
        self.r = float(wheel_radius)
        self.L = float(wheel_base) / 2.0
        self.W = float(track_width) / 2.0
        self.prev_ticks = [0.0, 0.0, 0.0, 0.0]
        self.prev_time = time.time()
        self.x = 0.0
        self.y = 0.0
        self.yaw = 0.0
        self.vx = 0.0
        self.vy = 0.0
        self.vth = 0.0
        self.tf_broadcaster = tf2_ros.TransformBroadcaster(self)
        self.timer = self.create_timer(1.0 / publish_rate_hz, self.timer_callback)

    def listener_callback(self, msg):
        vx = msg.linear.x
        vy = msg.linear.y
        omega = msg.angular.z
        command = f"{vx:.2f},{vy:.2f},{omega:.2f}\n"
        self.ser.write(command.encode('utf-8'))
        self.get_logger().info(f"Sent cmd_vel: {command.strip()}")

    def timer_callback(self):
        line = self.ser.readline().decode('utf-8', errors='ignore').strip()
        if not line:
            return
        parts = line.split(',')
        if len(parts) < 11 or parts[0] != "S":
            self.get_logger().warn("Bad serial line: " + line)
            return
        try:
            gx, gy, gz, ax, ay, az, e1, e2, e3, e4 = map(float, parts[1:])
        except ValueError:
            self.get_logger().warn("Parse error: " + line)
            return

        now = time.time()
        dt = now - self.prev_time
        if dt <= 0:
            return
        self.prev_time = now

        # Publish IMU
        imu_msg = Imu()
        imu_msg.header.stamp = self.get_clock().now().to_msg()
        imu_msg.header.frame_id = "imu_link"
        imu_msg.angular_velocity.x = math.radians(gx)
        imu_msg.angular_velocity.y = math.radians(gy)
        imu_msg.angular_velocity.z = math.radians(gz)
        imu_msg.linear_acceleration.x = ax
        imu_msg.linear_acceleration.y = ay
        imu_msg.linear_acceleration.z = az
        imu_msg.orientation_covariance[0] = -1.0
        imu_msg.angular_velocity_covariance = [0.0001, 0.0, 0.0, 0.0, 0.0001, 0.0, 0.0, 0.0, 0.0001]  # MPU6050 gyro noise
        imu_msg.linear_acceleration_covariance = [0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.01]  # MPU6050 accel noise
        self.imu_pub.publish(imu_msg)

        # Encoder -> Wheel Velocities
        ticks = [e1, e2, e3, e4]
        delta_ticks = [ticks[i] - self.prev_ticks[i] for i in range(4)]
        self.prev_ticks = ticks

        omega_w = [(delta_ticks[i] / self.ticks_per_rev) * (2.0 * math.pi) / dt for i in range(4)]
        v_w = [omega_w[i] * self.r for i in range(4)]
        v_FL, v_FR, v_RL, v_RR = v_w

        # Mecanum Inverse Kinematics
        self.vx = (v_FL + v_FR + v_RL + v_RR) / 4.0
        self.vy = (-v_FL + v_FR + v_RL - v_RR) / 4.0
        self.vth = (-v_FL + v_FR - v_RL + v_RR) / (4.0 * (self.L + self.W))

        # Integrate Pose
        dx = (self.vx * math.cos(self.yaw) - self.vy * math.sin(self.yaw)) * dt
        dy = (self.vx * math.sin(self.yaw) + self.vy * math.cos(self.yaw)) * dt
        d_yaw = self.vth * dt
        self.x += dx
        self.y += dy
        self.yaw += d_yaw

        # Publish Odometry
        odom_msg = Odometry()
        odom_msg.header.stamp = self.get_clock().now().to_msg()
        odom_msg.header.frame_id = "odom"
        odom_msg.child_frame_id = "base_link"  # Match EKF
        odom_msg.pose.pose.position.x = self.x
        odom_msg.pose.pose.position.y = self.y
        odom_msg.pose.pose.position.z = 0.0
        q = tf_transformations.quaternion_from_euler(0, 0, self.yaw)
        odom_msg.pose.pose.orientation.x = q[0]
        odom_msg.pose.pose.orientation.y = q[1]
        odom_msg.pose.pose.orientation.z = q[2]
        odom_msg.pose.pose.orientation.w = q[3]
        odom_msg.twist.twist.linear.x = self.vx
        odom_msg.twist.twist.linear.y = self.vy
        odom_msg.twist.twist.angular.z = self.vth
        odom_msg.pose.covariance = [0.01, 0.0, 0.0, 0.0, 0.0, 0.0,
                                    0.0, 0.01, 0.0, 0.0, 0.0, 0.0,
                                    0.0, 0.0, 0.01, 0.0, 0.0, 0.0,
                                    0.0, 0.0, 0.0, 0.01, 0.0, 0.0,
                                    0.0, 0.0, 0.0, 0.0, 0.01, 0.0,
                                    0.0, 0.0, 0.0, 0.0, 0.0, 0.01]
        odom_msg.twist.covariance = [0.01, 0.0, 0.0, 0.0, 0.0, 0.0,
                                     0.0, 0.01, 0.0, 0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.01, 0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0, 0.01, 0.0, 0.0,
                                     0.0, 0.0, 0.0, 0.0, 0.01, 0.0,
                                     0.0, 0.0, 0.0, 0.0, 0.0, 0.01]
        self.odom_pub.publish(odom_msg)

        t = TransformStamped()
        t.header.stamp = self.get_clock().now().to_msg()
        t.header.frame_id = "odom"
        t.child_frame_id = "base_link"
        t.transform.translation.x = self.x
        t.transform.translation.y = self.y
        t.transform.translation.z = 0.0
        t.transform.rotation.x = q[0]
        t.transform.rotation.y = q[1]
        t.transform.rotation.z = q[2]
        t.transform.rotation.w = q[3]
        self.tf_broadcaster.sendTransform(t)

def main(args=None):
    rclpy.init(args=args)
    node = SensorBridge()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

--------------------------------------ekf----------------------------------------------------
ekf_filter_node:
  ros__parameters:
    frequency: 30.0
    sensor_timeout: 0.1
    two_d_mode: true
    publish_tf: true
    map_frame: map
    odom_frame: odom
    base_link_frame: base_link
    world_frame: odom

    odom0: /wheel/odom
    odom0_config: [true, true, false,   # x, y position
                   false, false, true,  # roll, pitch, yaw
                   true, true, false,   # vx, vy
                   false, false, true,  # angular velocities
                   false, false, false] # accel off
    odom0_differential: false
    odom0_relative: false
    odom0_pose_covariance_override: [1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                     0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                                     0.0, 0.0, 1e6, 0.0, 0.0, 0.0,
                                     0.0, 0.0, 0.0, 1e6, 0.0, 0.0,
                                     0.0, 0.0, 0.0, 0.0, 1e6, 0.0,
                                     0.0, 0.0, 0.0, 0.0, 0.0, 1.0]  # Increased to 1.0 for x/y/yaw
    odom0_twist_covariance_override: [1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                      0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                                      0.0, 0.0, 1e6, 0.0, 0.0, 0.0,
                                      0.0, 0.0, 0.0, 1e6, 0.0, 0.0,
                                      0.0, 0.0, 0.0, 0.0, 1e6, 0.0,
                                      0.0, 0.0, 0.0, 0.0, 0.0, 1.0]  # Increased to 1.0 for vx/vy/vz

    imu0: /imu/data
    imu0_config: [false, false, false,  # position off
                  false, false, false,  # orientation off
                  false, false, false,  # linear velocities off
                  true, true, true,     # angular velocities
                  true, true, false]    # linear accel x/y, z disabled
    imu0_differential: false
    imu0_remove_gravitational_acceleration: true
    imu0_linear_acceleration_covariance_override: [2.0, 0.0, 0.0,
                                                   0.0, 2.0, 0.0,
                                                   0.0, 0.0, 1e6]  # Increased to 2.0 for x/y
    imu0_angular_velocity_covariance_override: [0.02, 0.0, 0.0,
                                                0.0, 0.02, 0.0,
                                                0.0, 0.0, 0.02]  # Slightly increased

    process_noise_covariance: [0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e6]  # Increased to 0.1 for x/y/vx/vy/yaw


----------------------------------------------------launch-----------------------------------------
#!/usr/bin/env python3

import os
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration, Command
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
from ament_index_python.packages import get_package_share_directory


def generate_launch_description():
    
    # Path to your URDF file
    urdf_file_path = '/home/ajay/ros2_ws/src/my_tutorial_1/urdf/myrobo1.urdf'
    
    # Read the URDF file
    with open(urdf_file_path, 'r') as urdf_file:
        robot_description_content = urdf_file.read()
    
    # Path to RViz config file (create this path in your package)
    package_name = 'my_tutorial_1'
    rviz_config_file = os.path.join(
        get_package_share_directory(package_name),
        'rviz',
        'robot_view.rviz'
    )
    
    # If the above path doesn't exist, use a default config
    if not os.path.exists(rviz_config_file):
        # Create a temporary config file path - RViz will use default if not found
        rviz_config_file = ''
        
    ekf_config = os.path.join(
        get_package_share_directory('my_tutorial_1'),
        'config',
        'ekf.yaml'
    )
    return LaunchDescription([
        
        # Robot State Publisher - publishes robot transforms from URDF
        Node(
            package='robot_state_publisher',
            executable='robot_state_publisher',
            name='robot_state_publisher',
            output='screen',
            parameters=[{
                'robot_description': robot_description_content,
                'use_sim_time': False
            }]
        ),
        
        # Joint State Publisher - publishes joint states (optional, for wheel visualization)
        Node(
            package='joint_state_publisher',
            executable='joint_state_publisher',
            name='joint_state_publisher',
            output='screen',
            parameters=[{
                'use_sim_time': False
            }]
        ),
        
        # RViz Node with custom config
        Node(
           package='rviz2',
           executable='rviz2',
           name='rviz2',
           output='screen',
           arguments=['-d', rviz_config_file] if rviz_config_file else [],
           parameters=[{
               'use_sim_time': False
           }],
           Set initial RViz configuration via parameters
           remappings=[]
        ) ,
        
        
        
        Node(
            package='robot_localization',
            executable='ekf_node',
            name='ekf_filter_node',
            output='screen',
            parameters=['/home/ajay/ros2_ws/src/my_tutorial_1/config/ekf.yaml']
            
        )
    ])


odom_msg.pose.covariance = [0.001, 0, 0, 0, 0, 0,
                            0, 0.001, 0, 0, 0, 0,
                            0, 0, 1e6, 0, 0, 0,
                            0, 0, 0, 1e6, 0, 0,
                            0, 0, 0, 0, 1e6, 0,
                            0, 0, 0, 0, 0, 0.01]

odom_msg.twist.covariance = [0.001, 0, 0, 0, 0, 0,
                             0, 0.001, 0, 0, 0, 0,
                             0, 0, 1e6, 0, 0, 0,
                             0, 0, 0, 1e6, 0, 0,
                             0, 0, 0, 0, 1e6, 0,
                             0, 0, 0, 0, 0, 0.01]

